-- Compliance Calendar Migration
-- Adds tables for tasks, deadlines, recurring events, and calendar management

-- Task status enum
CREATE TYPE task_status AS ENUM (
  'pending',
  'in_progress',
  'completed',
  'overdue',
  'cancelled',
  'on_hold'
);

-- Task priority enum  
CREATE TYPE task_priority AS ENUM (
  'low',
  'medium',
  'high',
  'urgent'
);

-- Task category enum
CREATE TYPE task_category AS ENUM (
  'compliance_deadline',
  'audit_preparation',
  'document_review',
  'training_session',
  'certification_renewal',
  'inspection_date',
  'reporting_deadline',
  'maintenance_task',
  'meeting',
  'other'
);

-- Recurrence pattern enum
CREATE TYPE recurrence_pattern AS ENUM (
  'none',
  'daily',
  'weekly',
  'monthly',
  'quarterly',
  'yearly',
  'custom'
);

-- Calendar tasks table
CREATE TABLE calendar_tasks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  category task_category DEFAULT 'other',
  status task_status DEFAULT 'pending',
  priority task_priority DEFAULT 'medium',
  
  -- Timing
  start_date TIMESTAMPTZ NOT NULL,
  end_date TIMESTAMPTZ,
  due_date TIMESTAMPTZ,
  all_day BOOLEAN DEFAULT false,
  
  -- Location and context
  location VARCHAR(255),
  
  -- Assignment
  assigned_to UUID REFERENCES auth.users(id),
  assigned_by UUID REFERENCES auth.users(id),
  
  -- Related entities
  resource_type VARCHAR(50), -- 'document', 'workflow', 'audit', etc.
  resource_id UUID,
  
  -- Compliance specific
  compliance_framework VARCHAR(100), -- 'ISO 50001', 'GDPR', 'SOX', etc.
  regulatory_reference VARCHAR(255),
  
  -- Recurrence
  recurrence_pattern recurrence_pattern DEFAULT 'none',
  recurrence_config JSONB DEFAULT '{}', -- Custom recurrence rules
  parent_task_id UUID REFERENCES calendar_tasks(id), -- For recurring instances
  
  -- Reminder settings
  reminder_intervals INTEGER[] DEFAULT ARRAY[1440, 60], -- Minutes before (24h, 1h)
  
  -- Metadata
  tags TEXT[],
  metadata JSONB DEFAULT '{}',
  
  -- Audit fields
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  created_by UUID REFERENCES auth.users(id),
  updated_by UUID REFERENCES auth.users(id),
  
  -- Soft delete
  deleted_at TIMESTAMPTZ
);

-- Task dependencies table (for complex workflows)
CREATE TABLE task_dependencies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  task_id UUID NOT NULL REFERENCES calendar_tasks(id) ON DELETE CASCADE,
  depends_on_task_id UUID NOT NULL REFERENCES calendar_tasks(id) ON DELETE CASCADE,
  dependency_type VARCHAR(20) DEFAULT 'finish_to_start', -- finish_to_start, start_to_start, etc.
  lag_days INTEGER DEFAULT 0, -- Days between dependency completion and task start
  created_at TIMESTAMPTZ DEFAULT NOW(),
  
  UNIQUE(task_id, depends_on_task_id)
);

-- Task comments/updates table
CREATE TABLE task_comments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  task_id UUID NOT NULL REFERENCES calendar_tasks(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id),
  tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
  comment TEXT NOT NULL,
  comment_type VARCHAR(20) DEFAULT 'comment', -- comment, status_change, assignment, etc.
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Task attachments table
CREATE TABLE task_attachments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  task_id UUID NOT NULL REFERENCES calendar_tasks(id) ON DELETE CASCADE,
  tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
  file_name VARCHAR(255) NOT NULL,
  file_path VARCHAR(500) NOT NULL,
  file_size INTEGER,
  mime_type VARCHAR(100),
  uploaded_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Compliance deadlines table (specific compliance requirements)
CREATE TABLE compliance_deadlines (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
  task_id UUID REFERENCES calendar_tasks(id) ON DELETE SET NULL,
  
  -- Compliance details
  framework VARCHAR(100) NOT NULL, -- 'ISO 50001', 'GDPR', etc.
  requirement_code VARCHAR(100), -- 'ISO 50001 4.5.1', 'GDPR Art. 30', etc.
  requirement_title VARCHAR(255) NOT NULL,
  requirement_description TEXT,
  
  -- Deadline information
  deadline_date TIMESTAMPTZ NOT NULL,
  submission_deadline TIMESTAMPTZ, -- Earlier deadline for preparation
  frequency recurrence_pattern DEFAULT 'yearly',
  
  -- Responsibility
  responsible_department VARCHAR(100),
  responsible_person UUID REFERENCES auth.users(id),
  
  -- Status tracking
  preparation_status VARCHAR(20) DEFAULT 'not_started', -- not_started, in_progress, ready, submitted
  evidence_required BOOLEAN DEFAULT true,
  evidence_location TEXT,
  
  -- Penalties/consequences
  penalty_description TEXT,
  penalty_amount DECIMAL(10,2),
  
  -- Metadata
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  created_by UUID REFERENCES auth.users(id)
);

-- Calendar views/filters (user preferences)
CREATE TABLE calendar_views (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  
  -- View settings
  view_type VARCHAR(20) DEFAULT 'month', -- month, week, day, agenda
  filters JSONB DEFAULT '{}', -- category, status, priority, assigned_to filters
  color_scheme JSONB DEFAULT '{}',
  is_default BOOLEAN DEFAULT false,
  is_shared BOOLEAN DEFAULT false,
  
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_calendar_tasks_tenant_date ON calendar_tasks(tenant_id, start_date);
CREATE INDEX idx_calendar_tasks_assigned ON calendar_tasks(assigned_to, status) WHERE deleted_at IS NULL;
CREATE INDEX idx_calendar_tasks_due_date ON calendar_tasks(due_date) WHERE status != 'completed' AND deleted_at IS NULL;
CREATE INDEX idx_calendar_tasks_category ON calendar_tasks(category, tenant_id);
CREATE INDEX idx_calendar_tasks_status ON calendar_tasks(status, tenant_id) WHERE deleted_at IS NULL;
CREATE INDEX idx_calendar_tasks_recurrence ON calendar_tasks(parent_task_id) WHERE parent_task_id IS NOT NULL;
CREATE INDEX idx_compliance_deadlines_framework ON compliance_deadlines(framework, tenant_id);
CREATE INDEX idx_compliance_deadlines_date ON compliance_deadlines(deadline_date, tenant_id);
CREATE INDEX idx_task_comments_task ON task_comments(task_id, created_at);

-- RLS Policies
ALTER TABLE calendar_tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_dependencies ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_attachments ENABLE ROW LEVEL SECURITY;
ALTER TABLE compliance_deadlines ENABLE ROW LEVEL SECURITY;
ALTER TABLE calendar_views ENABLE ROW LEVEL SECURITY;

-- Calendar tasks policies
CREATE POLICY "Users can view tasks for their tenant" ON calendar_tasks
  FOR SELECT USING (
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    ) AND deleted_at IS NULL
  );

CREATE POLICY "Users can create tasks for their tenant" ON calendar_tasks
  FOR INSERT WITH CHECK (
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    )
  );

CREATE POLICY "Users can update tasks for their tenant" ON calendar_tasks
  FOR UPDATE USING (
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    )
  );

CREATE POLICY "Users can delete tasks for their tenant" ON calendar_tasks
  FOR DELETE USING (
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    )
  );

-- Task dependencies policies
CREATE POLICY "Users can manage task dependencies for their tenant" ON task_dependencies
  FOR ALL USING (
    task_id IN (
      SELECT id FROM calendar_tasks 
      WHERE tenant_id IN (
        SELECT tenant_id FROM profiles WHERE id = auth.uid()
      )
    )
  );

-- Task comments policies
CREATE POLICY "Users can view comments for their tenant tasks" ON task_comments
  FOR SELECT USING (
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    )
  );

CREATE POLICY "Users can create comments for their tenant tasks" ON task_comments
  FOR INSERT WITH CHECK (
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    ) AND
    user_id = auth.uid()
  );

-- Task attachments policies
CREATE POLICY "Users can manage attachments for their tenant tasks" ON task_attachments
  FOR ALL USING (
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    )
  );

-- Compliance deadlines policies
CREATE POLICY "Users can manage compliance deadlines for their tenant" ON compliance_deadlines
  FOR ALL USING (
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    )
  );

-- Calendar views policies
CREATE POLICY "Users can manage their own calendar views" ON calendar_views
  FOR ALL USING (
    user_id = auth.uid() AND
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    )
  );

CREATE POLICY "Users can view shared calendar views for their tenant" ON calendar_views
  FOR SELECT USING (
    tenant_id IN (
      SELECT tenant_id FROM profiles WHERE id = auth.uid()
    ) AND (user_id = auth.uid() OR is_shared = true)
  );

-- Functions for calendar management
CREATE OR REPLACE FUNCTION get_upcoming_tasks(user_tenant_id UUID, days_ahead INTEGER DEFAULT 30)
RETURNS TABLE (
  task_id UUID,
  title VARCHAR,
  due_date TIMESTAMPTZ,
  priority task_priority,
  status task_status,
  days_until_due INTEGER
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    ct.id,
    ct.title,
    ct.due_date,
    ct.priority,
    ct.status,
    EXTRACT(day FROM ct.due_date - NOW())::INTEGER as days_until_due
  FROM calendar_tasks ct
  WHERE ct.tenant_id = user_tenant_id
    AND ct.due_date IS NOT NULL
    AND ct.due_date BETWEEN NOW() AND NOW() + INTERVAL '1 day' * days_ahead
    AND ct.status NOT IN ('completed', 'cancelled')
    AND ct.deleted_at IS NULL
  ORDER BY ct.due_date ASC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION get_overdue_tasks(user_tenant_id UUID)
RETURNS TABLE (
  task_id UUID,
  title VARCHAR,
  due_date TIMESTAMPTZ,
  priority task_priority,
  days_overdue INTEGER,
  assigned_to UUID
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    ct.id,
    ct.title,
    ct.due_date,
    ct.priority,
    EXTRACT(day FROM NOW() - ct.due_date)::INTEGER as days_overdue,
    ct.assigned_to
  FROM calendar_tasks ct
  WHERE ct.tenant_id = user_tenant_id
    AND ct.due_date < NOW()
    AND ct.status NOT IN ('completed', 'cancelled')
    AND ct.deleted_at IS NULL
  ORDER BY ct.due_date ASC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION create_recurring_task_instance(
  parent_task_id UUID,
  new_start_date TIMESTAMPTZ,
  new_due_date TIMESTAMPTZ DEFAULT NULL
)
RETURNS UUID AS $$
DECLARE
  parent_task calendar_tasks%ROWTYPE;
  new_task_id UUID;
BEGIN
  -- Get parent task details
  SELECT * INTO parent_task
  FROM calendar_tasks
  WHERE id = parent_task_id;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Parent task not found';
  END IF;
  
  -- Create new task instance
  INSERT INTO calendar_tasks (
    tenant_id,
    title,
    description,
    category,
    priority,
    start_date,
    end_date,
    due_date,
    all_day,
    location,
    assigned_to,
    assigned_by,
    resource_type,
    resource_id,
    compliance_framework,
    regulatory_reference,
    recurrence_pattern,
    recurrence_config,
    parent_task_id,
    reminder_intervals,
    tags,
    metadata,
    created_by
  ) VALUES (
    parent_task.tenant_id,
    parent_task.title,
    parent_task.description,
    parent_task.category,
    parent_task.priority,
    new_start_date,
    CASE 
      WHEN parent_task.end_date IS NOT NULL 
      THEN new_start_date + (parent_task.end_date - parent_task.start_date)
      ELSE NULL
    END,
    COALESCE(new_due_date, new_start_date + (COALESCE(parent_task.due_date, parent_task.start_date) - parent_task.start_date)),
    parent_task.all_day,
    parent_task.location,
    parent_task.assigned_to,
    parent_task.assigned_by,
    parent_task.resource_type,
    parent_task.resource_id,
    parent_task.compliance_framework,
    parent_task.regulatory_reference,
    'none', -- Instances don't have their own recurrence
    '{}',
    parent_task_id,
    parent_task.reminder_intervals,
    parent_task.tags,
    parent_task.metadata,
    parent_task.created_by
  ) RETURNING id INTO new_task_id;
  
  RETURN new_task_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to automatically update task status to overdue
CREATE OR REPLACE FUNCTION update_overdue_tasks()
RETURNS TRIGGER AS $$
BEGIN
  -- This would typically be called by a scheduled job
  UPDATE calendar_tasks
  SET status = 'overdue', updated_at = NOW()
  WHERE due_date < NOW()
    AND status = 'pending'
    AND deleted_at IS NULL;
  
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically set updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_calendar_tasks_updated_at
  BEFORE UPDATE ON calendar_tasks
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_compliance_deadlines_updated_at
  BEFORE UPDATE ON compliance_deadlines
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Insert default compliance deadlines for common frameworks
INSERT INTO compliance_deadlines (tenant_id, framework, requirement_code, requirement_title, deadline_date, frequency, responsible_department, evidence_required) VALUES
-- ISO 50001 common deadlines (using first tenant as default)
(
  (SELECT id FROM tenants LIMIT 1),
  'ISO 50001',
  '4.4.6',
  'Management Review',
  DATE_TRUNC('year', NOW()) + INTERVAL '1 year' - INTERVAL '1 month',
  'yearly',
  'Energy Management',
  true
),
(
  (SELECT id FROM tenants LIMIT 1),
  'ISO 50001',
  '4.6.1',
  'Internal Energy Audit',
  DATE_TRUNC('year', NOW()) + INTERVAL '1 year' - INTERVAL '3 months',
  'yearly',
  'Quality Assurance',
  true
),
-- GDPR common deadlines
(
  (SELECT id FROM tenants LIMIT 1),
  'GDPR',
  'Art. 30',
  'Records of Processing Activities Update',
  DATE_TRUNC('year', NOW()) + INTERVAL '1 year',
  'yearly',
  'Data Protection',
  true
),
(
  (SELECT id FROM tenants LIMIT 1),
  'GDPR',
  'Art. 35',
  'DPIA Review for High-Risk Processing',
  DATE_TRUNC('quarter', NOW()) + INTERVAL '3 months',
  'quarterly',
  'Data Protection',
  true
);